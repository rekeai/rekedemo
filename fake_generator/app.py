# fake_generator/app.py
import os, uuid, requests, streamlit as st
from PIL import Image, ImageDraw
from sdk.reke_sdk import embed_image_treering, embed_video_hybrid

REKE_API_URL = os.getenv("REKE_API_URL", "").rstrip("/")
REKE_ORIGIN = os.getenv("REKE_ORIGIN", "Fake AI Generator")
REKE_SECRET = os.getenv("REKE_SECRET", "reke_demo_secret")

st.set_page_config(page_title="Fake AI Generator â€¢ Reke SDK", page_icon="ðŸ¤–", layout="wide")
st.title("ðŸ¤– Fake AI Generator (with Reke SDK)")

def make_demo_image(text="AI GENERATED"):
    p = f"gen_{uuid.uuid4().hex}.png"
    im = Image.new("RGB", (640, 480), (240, 240, 255))
    d = ImageDraw.Draw(im)
    d.text((20, 20), text, fill=(10, 10, 10))
    im.save(p)
    return p

col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("Generate (always watermarked)")
    if st.button("Create demo AI image (watermarked)"):
        img_path = make_demo_image("AI GENERATED BY REKE SDK")
        out_path = f"{uuid.uuid4().hex}.reke.png"
        out = embed_image_treering(img_path, out_path, origin=REKE_ORIGIN)
        data = open(out, "rb").read()
        st.image(data, caption="Generated image (watermarked)", use_column_width=True)
        st.success("Hidden watermark embedded via Reke SDK âœ…")
        st.download_button("Download AI Image (.reke.png) â€” preserve metadata", data, file_name="demo_ai.reke.png", mime="image/png")
        # optional: quick verify via API
        if REKE_API_URL:
            try:
                r = requests.post(f"{REKE_API_URL}/verify/", files={"file": ("demo_ai.reke.png", data, "image/png")}, timeout=15)
                if r.ok:
                    st.json(r.json())
                else:
                    st.warning("API returned error")
            except Exception as e:
                st.warning(f"API call failed: {e}")
        try:
            os.remove(img_path)
        except Exception:
            pass

    st.write("---")
    st.subheader("Create a 'Real' image (no watermark)")
    if st.button("Create demo Real image (no watermark)"):
        realp = make_demo_image("REAL IMAGE (no watermark)")
        data = open(realp, "rb").read()
        st.image(data, caption="Demo real image (no watermark)")
        st.download_button("Download real image", data, file_name="demo_real.png", mime="image/png")
        try:
            os.remove(realp)
        except Exception:
            pass

with col2:
    st.subheader("Send a downloaded file to Platform API")
    uploaded = st.file_uploader("Pick a generated or real image", type=["png", "jpg", "jpeg", "mp4"])
    if uploaded and st.button("Send to Platform API â†’ Verify"):
        tmp = f"tmp_{uuid.uuid4().hex}"
        with open(tmp, "wb") as f:
            f.write(uploaded.getvalue())
        mime = "video/mp4" if tmp.lower().endswith(".mp4") else "image/png"
        try:
            with open(tmp, "rb") as f:
                r = requests.post(f"{REKE_API_URL}/verify/", files={"file": (uploaded.name, f, mime)}, timeout=15)
            if r.ok:
                st.json(r.json())
            else:
                st.error("API error")
        except Exception as e:
            st.error(f"API call failed: {e}")
        finally:
            try:
                os.remove(tmp)
            except Exception:
                pass
